#pragma kernel ComputeDensityPressure
#pragma kernel ComputeForces
#pragma kernel Integrate
#pragma kernel HashParticles
#pragma kernel BitonicSort
#pragma kernel CalculateCellOffsets


struct Particle
{
    float pressure;
    float density;
    float3 currentForce;
    float3 velocity;
    float3 position;
};


RWStructuredBuffer<Particle> _particles;
RWStructuredBuffer<float3> _spherePosList;
RWStructuredBuffer<float> _sphereRadiusList;
RWStructuredBuffer<uint> _particleIndices;
RWStructuredBuffer<uint> _particleCellIndices;
RWStructuredBuffer<uint> _cellOffsets;

//Variable Declarations
float particleMass;
float viscosity;
float gasConstant;
float restDensity;
float boundDamping;
float radius;
float radius2;
float radius3;
float radius4;
float radius5;
float pi = 3.1415926535897932384626433832795028841971;
uint particleLength;
float timestep;
float3 boxSize;

float3 endPoint1;
float3 endPoint2;
float playerRadius;

int collisionMax = 10;


//variables for bitonic sort
int block;
int dim;

inline uint HashCell(in int3 cellIndex)
{
    const uint p1 = 73856093;
    const uint p2 = 19349663;
    const uint p3 = 83492791;
    
    int n = p1 * cellIndex.x * p2 * cellIndex.y * p3 * cellIndex.z;
    n %= particleLength;
    
    return n;
}

int3 GetCell(float3 position)
{
    float3 halfS = boxSize / 2;
    return int3((position.x + halfS.x) / radius, (position.y + halfS.y) / radius, (position.z + halfS.z) / radius);

}
//functions for spatial hashing.
int3 GetGridIndex(float3 position, float cellSize)
{
    return floor(position / cellSize);

}



float3 getY(float u, float3 p0, float3 p1)
{
    
    if (u == 0)
    {
        return p0;
    }
    else if (u == 1)
    {
        return p1;
    }
    else if (0 < u && u < 1)
    {
        return p0 + u * (p1 - p0);

    }
       
    return float3(999.0, 999.0, 999.0);
        


}

//Smoothing Functions for Compute Forces
float StdKernel(float distanceSquared)
{
    float x = 1.0f - distanceSquared / radius2;
    return 315.f / (64.f * pi * radius3) * x * x * x;

}

float SpikyKernelFirstDerivative(float distance)
{
    float x = 1.0f - distance / radius;
    return -45.f / (pi * radius4) * x * x;

}

float SpikyKernelSecondDerivative(float distance)
{
    float x = 1.0f - distance / radius;
    return 90.f / (pi * radius5) * x;

}

float3 SpikyKernelGradient(float distance, float3 direction)
{
    return SpikyKernelFirstDerivative(distance) * direction;

}



//pressure : when two particles are too close to each other
//they push back each other.

//viscosity : Bind the particles 

[numthreads(256, 1, 1)]
void ComputeDensityPressure(uint3 id : SV_DISPATCHTHREADID)
{
    uint particleIndex = _particleIndices[id.x];
    
    int3 cellIndex = GetCell(_particles[particleIndex].position);
    float3 origin = _particles[particleIndex].position;
    float sum = 0;
    
    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
                int3 neighbourIndex = cellIndex + int3(i, j, k);
                uint hashNeighbourIndex = HashCell(neighbourIndex);
                uint neighbourIterator = _cellOffsets[hashNeighbourIndex];
                
                while (neighbourIterator != 99999999 && neighbourIterator < particleLength)
                {
                    uint particleIndexB = _particleIndices[neighbourIterator];
                    
                    if (_particleCellIndices[particleIndexB] != hashNeighbourIndex)
                    {
                        break;
                    }
                    
                    Particle particleB = _particles[particleIndexB];
                    
                    float3 diff = origin - particleB.position;
                    float distanceSquared = dot(diff, diff);
                    
                    if (radius2 * 0.004 > distanceSquared * 0.004)
                    {
                        sum += StdKernel(distanceSquared * 0.004);

                    }
                    
                    neighbourIterator++;
                    

                }

            }

        }
    }
       
    
    _particles[particleIndex].density = sum * particleMass + 0.000001f;
    _particles[particleIndex].pressure = gasConstant * (_particles[particleIndex].density - restDensity);

    
    
    //this code is newly added
    if (_particles[particleIndex].pressure <= 0)
        _particles[particleIndex].pressure = 0;
  
}


[numthreads(256,1,1)]
void ComputeForces(uint3 id : SV_DISPATCHTHREADID)
{
    uint particleIndex = _particleIndices[id.x];
    int3 cellIndex = GetCell(_particles[particleIndex].position);
    
    float3 origin = _particles[particleIndex].position;
    float density2 = _particles[particleIndex].density * _particles[particleIndex].density;
    float mass2 = particleMass * particleMass;
    float3 pressure = float3(0, 0, 0); // to be calculated
    float3 visc = float3(0, 0, 0); // to be calculated
    
    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
                int3 neighbourIndex = cellIndex + int3(i, j, k);
                uint hashNeighbourIndex = HashCell(neighbourIndex);
                uint neighbourIterator = _cellOffsets[hashNeighbourIndex];
                
                while (neighbourIterator != 99999999 && neighbourIterator < particleLength)
                {
                    uint particleIndexB = _particleIndices[neighbourIterator];
                    
                    if (_particleCellIndices[particleIndexB] != hashNeighbourIndex)
                    {
                        break;
                    }
                    
                    Particle particleB = _particles[particleIndexB];
                    
                    if (origin.x == particleB.position.x && origin.y == particleB.position.y && origin.z == particleB.position.z)
                    {
                        neighbourIterator++;
                        continue;
                    }
        
                    float dist = distance(particleB.position, origin);
                    
                    //handles repulsive pressure force between close particles.
                    if (dist < radius *2)
                    {
                        //calculates the direction vector from the 
                        //neighboring particle: particleB
                        //the current particle will be pushed away in this direction.
                        float3 pressureGradientDirection = normalize(_particles[particleIndex].position - particleB.position);
            
                        //Spiky kernel determines the magnitude of this force
                        float3 _pressureContribution = mass2 * SpikyKernelGradient(dist, pressureGradientDirection);
                        _pressureContribution *= (_particles[particleIndex].pressure / density2 + particleB.pressure / (particleB.density * particleB.density));

                        float3 _viscosityContribution = viscosity * mass2 * (particleB.velocity - _particles[particleIndex].velocity) / particleB.density;
                        _viscosityContribution *= SpikyKernelSecondDerivative(dist);
            
                        pressure += _pressureContribution;
                        visc += _viscosityContribution;

                    }
                    
                    neighbourIterator++;
                }
        
            }
        }

    }

    _particles[particleIndex].currentForce = float3(0, -9.81 * particleMass, 0) - pressure + visc;

    
    //collision handling with multiple spheres
    for (int a = 0; a < collisionMax; a++)
    {
        float3 colDir = _particles[id.x].position - _spherePosList[a];
        if (length(colDir) < _sphereRadiusList[a])
        {
            _particles[id.x].currentForce += colDir * 30;
        }

    }
    
    float3 p0 = endPoint1;
    float3 p1 = endPoint2;
    
    float3 xsphere = _particles[id.x].position;
    
    
    
    //1. determine umin
    float umin;
    if (xsphere.y >= p0.y)
    {
        umin = 1.0;
    }
    else if (xsphere.y < p0.y && xsphere.y > p1.y)
    {
        float3 x1 = float3(p0.x, xsphere.y, p0.z);
        umin = length(x1 - p0) / length(p1 - p0);

    }
    else if (xsphere.y <= p0.y)
    {
        umin = 0;
    }
    else
    {
        umin = 999.9f;
    }
    
    //2. compute dmin to find a collision condition
    float dmin = length(xsphere - getY(umin,p0,p1));
    
    //3. collision handling
    if (dmin <= radius + playerRadius)
    {
        float3 nearest = getY(umin,p0,p1);
        float3 colDir = _particles[particleIndex].position - nearest;
        
        _particles[particleIndex].currentForce += colDir * 30;
        
    }
    //float dmin = length(xsphere - x(umin));
    
    

}

//this function is called once for every single particle
[numthreads(256,1,1)]
void Integrate(uint3 id : SV_DiSPATCHTHREADID)
{
    //since F=ma, F/m ecomes accelration.
    // velocity = initial velocity + Accelration * timestep
    // time step is a key factor for accurate simulation but also for the perforamnce 
    
    float3 vel = _particles[id.x].velocity + ((_particles[id.x].currentForce / particleMass) * timestep);
    
    //change of position = velocity * timestep
    _particles[id.x].position += vel * timestep;
    
    
    
    float3 topRight = boxSize / 2;
    float3 bottomLeft = -boxSize / 2;
    
    //Min Boundary Enforcements
    if (_particles[id.x].position.x - radius < bottomLeft.x)
    {
        //when dampped to the boundary
        vel.x *= boundDamping;
        _particles[id.x].position.x = bottomLeft.x + radius;
    }
    
    if (_particles[id.x].position.y - radius < bottomLeft.y)
    {
        vel.y *= boundDamping;
        _particles[id.x].position.y = bottomLeft.y + radius;
    }
    
    if (_particles[id.x].position.z - radius < bottomLeft.z)
    {
        vel.z *= boundDamping;
        _particles[id.x].position.z = bottomLeft.z + radius;
    }
    
    
    //Max Boundary Enforcements
    if (_particles[id.x].position.x + radius > topRight.x)
    {
        //when dampped to the boundary
        vel.x *= boundDamping;
        _particles[id.x].position.x = topRight.x - radius;
    }
    
    if (_particles[id.x].position.y + radius > topRight.y)
    {
        vel.y *= boundDamping;
        _particles[id.x].position.y = topRight.y - radius;
    }
    
    if (_particles[id.x].position.z + radius > topRight.z)
    {
        vel.z *= boundDamping;
        _particles[id.x].position.z = topRight.z - radius;
    }
    
    //check the bounding box condition
    //when the particles go out of the box,
    // they bounce back.
    _particles[id.x].velocity = vel;
    
}

[numthreads(256,1,1)]
void HashParticles(uint3 id : SV_DISPATCHTHREADID)
{
    _cellOffsets[id.x] = 99999999;
    
    uint particleIndex = _particleIndices[id.x];
    _particleCellIndices[particleIndex] = HashCell(GetCell(_particles[particleIndex].position));
}

[numthreads(256,1,1)]
void BitonicSort(int3 id : SV_DISPATCHTHREADID)
{
    uint i = id.x + id.y * 256 * 1024;
    uint j = i ^ block;
    
    if (j < i || i >= particleLength)
        return;
    
    uint key_i = _particleIndices[i];
    uint key_j = _particleIndices[j];
    float value_i = _particleCellIndices[key_i];
    float value_j = _particleCellIndices[key_j];
    
    float diff = (value_i - value_j) * ((i & dim) == 0 ? 1 : -1);
    
    if (diff > 0)
    {
        _particleIndices[i] = key_j;
        _particleIndices[j] = key_i;
    }

}

[numthreads(256,1,1)]
void CalculateCellOffsets(uint3 id : SV_DISPATCHTHREADID)
{
    uint particleIndex = _particleIndices[id.x];
    uint cellIndex = _particleCellIndices[particleIndex];
    
    InterlockedMin(_cellOffsets[cellIndex], id.x);
}